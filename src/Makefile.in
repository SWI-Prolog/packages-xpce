################################################################
# Makefile for XPCE version 6
#
# NOTE NOTE NOTE: This Makefile only works with GNU-Make!!
#
# Targets:
#
#	make			Builds shared object for SWI-Prolog
#
# The XPCE project was started by Anjo Anjewierden, who developed version
# 1 and 2.  Version 3 is result of joint effort from Anjo Anjewierden and
# Jan Wielemaker.  Versions 4 to 6 are written by Jan Wielemaker.
#
# Addresses:	Jan Wielemaker:		J.Wielemaker@vu.nl
#		Anjo Anjewierden:	A.A.Anjewierden@gw.utwente.nl
#
# XPCE is licenced under the LGPL. See the file COPYING or
# http://www.swi-prolog.org/license.html
#
# Copyright (C) 1993-2013, University of Amsterdam
#			   VU University Amsterdam
################################################################

.EXPORT_ALL_VARIABLES:
.SUFFIXES: .cxx
include ../../Makefile.defs

SHELL=@MAKESHELL@
MAKE=@MAKE@

builddir=@buildsubdir@
srcdir=@srcdir@
vpath %.c @srcdir@
vpath %.h @srcdir@
vpath %.y @srcdir@
vpath %.cxx @srcdir@
prefix=@prefix@
exec_prefix=@exec_prefix@
datarootdir=@datarootdir@
mansec=1
mandir=@mandir@
smandir=$(mandir)/man$(mansec)
libdir=@libdir@
bindir=@bindir@

PCEHOME=@PCEHOME@
XINCLUDES=@XINCLUDES@
XLIB=@XLIB@
PKGCFLAGS=-I. -I$(srcdir)
EXEEXT=@EXEEXT@

# PROGRAMS

LDCONFIG=@LDCONFIG@
YACC=@YACC@
MKPROTO=$(srcdir)/mkproto.sh
LN=@LN_S@
WINDRES=@WINDRES@
ETAGS=@ETAGS@
SED=sed
RM=rm
REL_LN=$(srcdir)/rel-ln

CC_FOR_BUILD = @CC_FOR_BUILD@
EXEEXT_FOR_BUILD = @EXEEXT_FOR_BUILD@

INSTALL=./xpce-copy$(EXEEXT_FOR_BUILD)
INSTALL_PROGRAM=$(INSTALL) -m 755
INSTALL_DATA=$(INSTALL) -m 644
FIND_NAMES=find_names$(EXEEXT_FOR_BUILD)

# LIBRARIES

NETLIBS=@NETLIBS@
XLIBS=@XLIBS@
XOSLIB=@XOSLIB@
PKGLDFLAGS=@LDFLAGS@
SO=@SO@
SOLIB=@SOLIB@
VWS=@VWS@

LIBS= $(XLIBS) $(NETLIBS) -lm

################################################################
# TARGET LIBRARIES
################################################################

LIBDIR=../lib/@PLARCH@
LIBXPCE=$(LIBDIR)/libXPCE.a
PL2XPCE=$(LIBDIR)/pl2xpce.$(SO)

################################################################
# PATHS FOR HOST-LANGUAGES
################################################################

# SWI-Prolog

PLBASE=@PLBASE@
PLARCH=@PLARCH@
PLINCL=@PLINCL@
INSTALL_PLARCH=@INSTALL_PLARCH@
PLBINDIR=$(PLBASE)/bin/$(INSTALL_PLARCH)
PL=@PL@
PLWINNAME=@PLWINNAME@

################################################################
# Version information
################################################################

VMAJOR=@VMAJOR@
VMINOR=@VMINOR@
VPATCH=@VPATCH@
PCEVERSIONDATE=July 2009

SOMAJOR=$(VMAJOR)
SOMINOR=$(VMINOR).$(VPATCH)
PCEVERSION=$(VMAJOR).$(VMINOR).$(VPATCH)
VERSION=$(PCEVERSION), $(PCEVERSIONDATE)

################################################################
# OTHER PATHS
################################################################

MANINDEX=../man/reference/index.obj
LOCALINDEX=../prolog/lib/INDEX.pl

################################################################
# IMPLICIT RULES
################################################################

.c.o:
		$(CC) -c $(CFLAGS) $< -o $@

.c.a:
		$(CC) -c $(CFLAGS) $< -o $(*F).o
		@$(AR) r $@ $(*F).o
		@$(RM) $(*F).o

################################################################
# MAIN TARGETS
################################################################

# actually depends on whether Unix-domain sockets are supported
ifeq ($(VWS),x11)
XPCECLIENT=xpce-client$(EXEEXT)
endif

ifeq ($(VWS),msw)
XPCESTUB=xpce-stub$(EXEEXT)
endif

.PHONY: all banner xpce pl-itf
all:		banner $(INSTALL) xpce pl-itf

$(INSTALL):	xpce-copy.c
		$(CC_FOR_BUILD) -I. -DHAVE_CONFIG_H -o $@ $(srcdir)/xpce-copy.c

banner:
		@echo "****************"
		@echo "Making XPCE $(VERSION) for $(PLARCH)"
		@echo "****************"

.PHONY:		xpce prepare
xpce:		prepare $(LIBXPCE) $(XPCECLIENT) $(XPCESTUB)
pl-itf:		$(PL2XPCE)

$(PL2XPCE):	$(LIBXPCE)
		cd ../swipl; \
		CANONICAL_PATHS=$(PCEHOME); export CANONICAL_PATHS; \
		$(MAKE) PL=$(PL) soall

$(MANINDEX):	$(shell find ../man/reference -name '*.doc')
		-./xpce.sh \
		  -F none \
		  -g "[library('man/man_index')],pce_make_manual_index('$@')" \
		  -t halt

$(LOCALINDEX):
		$(PL) -f none -t 'halt(1)' \
			-g "make_library_index('../prolog/lib'),halt"

################################################################
# XPCE's modules
################################################################

MODULES=	adt ari evt gnu gra itf ker men fmt msg prg rel \
		rgx txt unx win img box

################################################################
# PROTOTYPES (must be made in the source directory)
################################################################

proto:		$(foreach m, $(MODULES) $(VWS), $(srcdir)/$(m)/proto.h)

################################################################
# Building the directories
################################################################

NAMES=		$(srcdir)/h/names.ih $(srcdir)/h/interface.h

prepare:	directories $(NAMES)

directories:	$(MODULES) $(VWS)

$(MODULES) bin lib $(VWS):
		mkdir $@

################################################################
# Building the name tables
################################################################

$(FIND_NAMES):	$(srcdir)/find_names.c
		$(CC_FOR_BUILD) -o $@ $(srcdir)/find_names.c

$(NAMES):	.names-sentinel
.names-sentinel: $(FIND_NAMES)
		cd $(srcdir); \
		../$(builddir)/$(FIND_NAMES) h/names.ic h/names.ih -- h/*.h ???/*.c
		@touch $@

################################################################
# GNU-Emacs TAG table
################################################################

tags:
		cd $(srcdir); \
		fs="h/*.h $(VWS)/*.c"; \
		for d in $(MODULES); do fs="$$fs $$d/*.c"; done; \
		$(ETAGS) $$fs

################################################################
# ADT		--- Abstract Data Types
################################################################

ADTOBJS=	area.o atable.o attribute.o bool.o chain.o chaintable.o \
		constant.o date.o dict.o dictitem.o hashtable.o number.o \
		point.o real.o region.o sheet.o size.o tuple.o vector.o
ADTSRC=		$(addprefix $(srcdir)/adt/, $(ADTOBJS:.o=.c))

$(srcdir)/adt/proto.h:	$(ADTSRC)
		$(MKPROTO) $(ADTSRC) > $@

################################################################
# ARI		--- Arithmetic Operations
################################################################

ARIOBJS=	equation.o expression.o
ARISRC=		$(addprefix $(srcdir)/ari/, $(ARIOBJS:.o=.c))

$(srcdir)/ari/proto.h:	$(ARISRC)
		$(MKPROTO) $(ARISRC) > $@

################################################################
# EVT		--- Event Handling Primitives
################################################################

EVTOBJS=	clickgesture.o conngesture.o event.o \
		eventnode.o eventtree.o gesture.o handler.o \
		handlergroup.o modifier.o movegesture.o \
		mvolgesture.o popupgesture.o recogniser.o \
		resizegesture.o rzolgesture.o edittextgest.o \
		browserselgesture.o resizetabslice.o
EVTSRC=		$(addprefix $(srcdir)/evt/, $(EVTOBJS:.o=.c))

$(srcdir)/evt/proto.h:	$(EVTSRC)
		$(MKPROTO) $(EVTSRC) > $@

################################################################
# GNU		--- GNU-Project Libraries
################################################################

GNUOBJS=	getdate.o
GNUSRC=		$(addprefix $(srcdir)/gnu/, $(GNUOBJS:.o=.c))
#CNWFLAGS=	$(CMFLAGS) $(COFLAGS) $(CIFLAGS)

gnu/gregex.o:	gnu/gregex.c gnu/gregex.h
		$(CC) -c $(CFLAGS) -Dpce_source $< -o $@
gnu/getdate.o:	$(srcdir)/gnu/getdate.c
		$(CC) -c $(CFLAGS) $< -o $@

# NOTE: this is not a normal dependency as include the .c file in
# the distro to reduce build dependencies (M$-Windows) and we do
# not expect gnu/getdate.y to change regularly.  If yoou change
# it, run "make getdate-src".

getdate-src::
		$(YACC) $(srcdir)/gnu/getdate-source.y
		mv -f y.tab.c $(srcdir)/gnu/getdate.c

$(srcdir)/gnu/proto.h:	$(GNUSRC)
		$(MKPROTO) $(GNUSRC) > $@

################################################################
# GRA		--- Graphics Classes
################################################################

GRAOBJS=	arc.o arrow.o bitmap.o box.o circle.o colour.o \
		connection.o cursor.o device.o ellipse.o figure.o \
		font.o format.o graphical.o handle.o image.o \
		joint.o line.o link.o listbrowser.o node.o path.o \
		postscript.o scrollbar.o text.o tree.o visual.o \
		pixmap.o elevation.o pen.o draw.o colourmap.o \
		bezier.o hsv.o
GRASRC=		$(addprefix $(srcdir)/gra/, $(GRAOBJS:.o=.c))

$(srcdir)/gra/proto.h:	$(GRASRC)
		$(MKPROTO) $(GRASRC) > $@

################################################################
# ITF		--- Host Interface Layer
################################################################

ITFOBJS=	c.o host.o interface.o cpointer.o asfile.o console.o \
		stub.o xmalloc.o iostream.o srcsink.o rc.o hostdata.o \
		public.o
ITFSRC=		$(addprefix $(srcdir)/itf/, $(ITFOBJS:.o=.c))

################################################################
# KER		--- Kernel modules
################################################################

KER1OBJS=	alloc.o assoc.o behaviour.o class.o conversion.o \
		debug.o declarations.o error.o gc.o \
		getmethod.o glob.o global.o goodies.o passing.o \
		method.o name.o object.o programobject.o save.o \
		self.o sendmethod.o srclocation.o timer.o \
		trace.o type.o variable.o xref.o classvar.o
KER2OBJS=	inline.o
KEROBJS=	$(KER1OBJS) $(KER2OBJS)
KER1SRC=	$(addprefix $(srcdir)/ker/, $(KER1OBJS:.o=.c))

$(srcdir)/ker/proto.h:	$(KER1SRC)
		$(MKPROTO) $(KER1SRC) | grep -v PceGoal | grep -v PceType > $@

version.h:	Makefile
		@echo "#define MACHINE \"$(PLARCH)\"" > $@%
		@echo "#define PCE_VERSION \"$(VERSION)\"" >> $@%
		@echo "#define OS \"$(PLARCH)\"" >> $@%
		@if cmp -s $@% $@; then rm $@%; else mv $@% $@; fi

h/interface.h:	Makefile
		@sed 's/^#define *PCE_VERSION *.*/#define PCE_VERSION \"$(VERSION)\"/' $@ > $@%
		@if cmp -s $@% $@; then rm $@%; else mv $@% $@; fi

$(srcdir)/h/kernel.h:	$(srcdir)/h/names.ih

ker/self.o:	version.h

ker/name.o:	$(NAMES)

ker/glob.o:	$(srcdir)/h/kernel.h $(srcdir)/h/types.h $(srcdir)/h/graphics.h \
		$(srcdir)/h/lang.h $(srcdir)/h/layout.h


################################################################
# MEN		--- Menu (Dialog) items
################################################################

MENOBJS=	button.o dialogitem.o label.o menu.o menubar.o \
		menuitem.o popup.o slider.o textitem.o tab.o diagroup.o \
		tabstack.o labelbox.o intitem.o
MENSRC=		$(addprefix $(srcdir)/men/, $(MENOBJS:.o=.c))

$(srcdir)/men/proto.h:	$(MENSRC)
		$(MKPROTO) $(MENSRC) > $@


################################################################
# FMT		--- Layout managers
################################################################

FMTOBJS=	layoutmgr.o layoutitf.o \
		table.o tabcell.o tabslice.o
FMTSRC=		$(addprefix $(srcdir)/fmt/, $(FMTOBJS:.o=.c))

$(srcdir)/fmt/proto.h:	$(FMTSRC)
		$(MKPROTO) $(FMTSRC) > $@


################################################################
# BOX		--- Typesetting stuff
################################################################

BOXOBJS=	boxes.o hbox.o tbox.o parbox.o grbox.o rubber.o \
		lbox.o
BOXSRC=		$(addprefix $(srcdir)/box/, $(BOXOBJS:.o=.c))

$(srcdir)/box/proto.h:	$(BOXSRC)
		$(MKPROTO) $(BOXSRC) > $@


################################################################
# MSG		--- Executable (message) Objects
################################################################

MSGOBJS=	and.o assign.o binding.o block.o code.o create.o \
		equal.o function.o if.o message.o nonequal.o \
		not.o obtain.o or.o progn.o quote.o var.o when.o while.o \
		nameref.o
MSGSRC=		$(addprefix $(srcdir)/msg/, $(MSGOBJS:.o=.c))

$(srcdir)/msg/proto.h:	$(MSGSRC)
		$(MKPROTO) $(MSGSRC) > $@

################################################################
# PRG		--- Language Definition Classes
################################################################

PRGOBJS=	operator.o parser.o tokeniser.o
PRGSRC=		$(addprefix $(srcdir)/prg/, $(PRGOBJS:.o=.c))

$(srcdir)/prg/proto.h:	$(PRGSRC)
		$(MKPROTO) $(PRGSRC) > $@

################################################################
# REL		--- Relation Classes
################################################################

RELOBJS=	constraint.o hyper.o identity.o relation.o \
		spatial.o
RELSRC=		$(addprefix $(srcdir)/rel/, $(RELOBJS:.o=.c))

$(srcdir)/rel/proto.h:	$(RELSRC)
		$(MKPROTO) $(RELSRC) > $@

################################################################
# RGX		--- Henry Spencer's regex library
################################################################

RGXOBJS=	regcompW.o regexecW.o \
		regfree.o regerror.o

REGCOBJS=	rgx/regcomp.c \
		rgx/regc_lex.c rgx/regc_color.c rgx/regc_nfa.c \
		rgx/regc_cvec.c rgx/regc_locale.c

rgx/regcompA.o:	$(REGCOBJS)
		$(CC) -c $(CFLAGS) $(srcdir)/rgx/regcomp.c -o $@
rgx/regcompW.o:	$(REGCOBJS)
		$(CC) -c $(CFLAGS) -DREG_WIDE $(srcdir)/rgx/regcomp.c -o $@
rgx/regexecA.o:	rgx/regexec.c
		$(CC) -c $(CFLAGS) $< -o $@
rgx/regexecW.o:	rgx/regexec.c
		$(CC) -c $(CFLAGS) -DREG_WIDE $< -o $@
rgx/regfree.o:	rgx/regfree.c
		$(CC) -c $(CFLAGS) -DREG_WIDE $< -o $@
rgx/regerror.o:	rgx/regerror.c
		$(CC) -c $(CFLAGS) -DREG_WIDE $< -o $@

$(srcdir)/rgx/proto.h::

################################################################
# TXT		--- Text Representation and Manipulation Classes
################################################################

TXTOBJS=	chararray.o editor.o fragment.o keybinding.o \
		regex.o str.o string.o style.o syntax.o \
		textbuffer.o textcursor.o textimage.o \
		textmargin.o undo.o utf8.o i18n.o
TXTSRC=		$(addprefix $(srcdir)/txt/, $(TXTOBJS:.o=.c))

$(srcdir)/txt/proto.h:	$(TXTSRC)
		$(MKPROTO) $(TXTSRC) > $@

################################################################
# UNX		--- Unix File, Process and Network Classes
################################################################

UNXOBJS=	directory.o file.o process.o socket.o stream.o
UNXSRC=		$(addprefix $(srcdir)/unx/, $(UNXOBJS:.o=.c))

$(srcdir)/unx/proto.h:	$(UNXSRC)
		$(MKPROTO) $(UNXSRC) > $@


################################################################
# WIN		--- Windows and Frames
################################################################

WINOBJS=	browser.o decorate.o dialog.o display.o \
		displaymgr.o frame.o picture.o tileadjust.o \
		setup.o tile.o view.o window.o application.o \
		monitor.o
WINSRC=		$(addprefix $(srcdir)/win/, $(WINOBJS:.o=.c))

$(srcdir)/win/proto.h:	$(WINSRC)
		$(MKPROTO) $(WINSRC) > $@


################################################################
# IMG		--- Platform independent low-level image stuff
################################################################

IMGOBJS=	jdatasrc.o jdatadst.o jpegtoxpm.o gifread.o giftoxpm.o \
		gifwrite.o imgutil.o
IMGSRC=		$(addprefix $(srcdir)/img/, $(IMGOBJS:.o=.c))

$(srcdir)/img/proto.h:	$(IMGSRC)
		$(MKPROTO) $(IMGSRC) > $@

################################################################
# X11		--- X11 implementation of the XPCE Virtual Window Interface
################################################################

XCOMMOBJS=	canvas.o fshell.o xcommon.o xconvert.o x11-compat.o xppm.o
WSTOBJS=	xcolour.o xcursor.o xdisplay.o xdraw.o xevent.o xfont.o \
		xframe.o ximage.o xstream.o xtimer.o xwindow.o x11.o xmenu.o \
		xdnd.o xunix.o xjpeg.o
X11OBJS=	$(XCOMMOBJS) $(WSTOBJS)

XCOMMSRC=	$(addprefix $(srcdir)/x11/, $(XCOMMOBJS:.o=.c))
WSTSRC=		$(addprefix $(srcdir)/x11/, $(WSTOBJS:.o=.c)) \
		$(srcdir)/gra/graphstate.c

$(srcdir)/x11/wstproto.h: $(WSTSRC)
		$(MKPROTO) $(WSTSRC) | grep -v '^XImage' > $@

################################################################
# MSW		--- MS-Windows implementation of the
#		    XPCE Virtual Window Interface
################################################################

MSWOBJS=	mscolour.o mscursor.o msdisplay.o msdraw.o msevent.o \
		msfont.o msframe.o msimage.o msstream.o mstimer.o \
		mswindow.o msmenu.o mswin.o msppm.o msprinter.o \
		mscommon.o msmetafile.o msreadimage.o msjpeg.o \
		msprocess.o

MSWSRC=		$(addprefix $(srcdir)/msw/, $(MSWOBJS:.o=.c))

################################################################$
# LIBRARY TARGET
################################################################

OBJECTS=	$(addprefix adt/, $(ADTOBJS)) \
		$(addprefix ari/, $(ARIOBJS)) \
		$(addprefix evt/, $(EVTOBJS)) \
		$(addprefix gnu/, $(GNUOBJS)) \
		$(addprefix gra/, $(GRAOBJS)) \
		$(addprefix itf/, $(ITFOBJS)) \
		$(addprefix ker/, $(KEROBJS)) \
		$(addprefix men/, $(MENOBJS)) \
		$(addprefix fmt/, $(FMTOBJS)) \
		$(addprefix box/, $(BOXOBJS)) \
		$(addprefix msg/, $(MSGOBJS)) \
		$(addprefix prg/, $(PRGOBJS)) \
		$(addprefix rel/, $(RELOBJS)) \
		$(addprefix rgx/, $(RGXOBJS)) \
		$(addprefix txt/, $(TXTOBJS)) \
		$(addprefix unx/, $(UNXOBJS)) \
		$(addprefix win/, $(WINOBJS))

ifeq ($(VWS),x11)
WSOBJECTS=	$(addprefix $(VWS)/, $(X11OBJS))
else
WSOBJECTS=	$(addprefix $(VWS)/, $(MSWOBJS))
endif

WSOBJECTS+=	$(addprefix img/, $(IMGOBJS))

$(OBJECTS) $(WSOBJECTS): h/kernel.h .names-sentinel

$(LIBXPCE):	version.h $(OBJECTS) $(WSOBJECTS) $(LIBDIR)
		@echo "Running ar ru $(LIBXPCE) objects ..."
		@$(AR) ru $(LIBXPCE) $(OBJECTS) $(WSOBJECTS)
		$(RANLIB) $(LIBXPCE)

$(LIBDIR):
		mkdir -p $@

# GNU-Make "Target-specific Variable Values"
ifeq ($(VWS),x11)
$(WSOBJECTS):	CFLAGS+=$(XINCLUDES)
else
$(WSOBJECTS):	CFLAGS+=$(XINCLUDES) -DWIN32
endif

# Unix only (assumes using CC=swipl-ld)
$(XPCECLIENT):	unx/client.c
		$(CC) -c $(CFLAGS) $< -o client.o
		$(LD) $(LDFLAGS) -o $@ client.o $(NETLIBS)
		rm -f client.o

# MinGW only
$(XPCESTUB):	xpce-res.o xpce-stub.o
		$(LD) $(LDFLAGS) -Wl,--subsystem,windows -o $@ $^ $(LIBPLSO)

xpce-res.o:	../swipl/xpce-stub.rc ../swipl/swipl.ico
		$(WINDRES) -o $@ $<

xpce-stub.o:	../swipl/xpce-stub.c
		$(CC) -c $(CFLAGS) $< -o $@

################################################################
# INSTALLATION
################################################################

RTINSTALLDIRS=	postscript
RTHOME=		$(PLBASE)/xpce
RTBINDIR=	$(RTHOME)/bin/$(INSTALL_PLARCH)
RTLIBDIR=	$(PLBASE)/$(SOLIB)/$(INSTALL_PLARCH)
DVHOME=		$(RTHOME)
DVLIBDIRS=	lib lib/compatibility lib/dialog lib/draw lib/emacs lib/man \
		lib/xref lib/english demo contrib contrib/rubik lib/trace \
		lib/http lib/swi lib/plot lib/doc lib/math
DVIMGDIRS=	lib/dialog/bitmaps lib/trace/icons lib/trace/icons/16x16 \
		lib/doc/icons
DVBOOTDIRS=	boot
RTMISC=		Defaults Defaults.user COPYING README
DVFILES=	rt-install dv-home dv-lib dv-boot dv-help \
	        dv-link dv-pl-files dv-manual dv-man
DVINSTALL=	$(DVFILES) dv-qlf dv-bins dv-online dv-classindex
RTINSTALL=	home rt-misc rt-bitmaps rt-bins

.PHONY:		install dv-install $(DVINSTALL) $(RTINSTALL)
install:
		$(MAKE) -j 1 dv-install

rt-install:	$(INSTALL) $(RTINSTALL)

dv-install:	$(DVINSTALL)

rpm-install:	rt-home rt-misc rt-bitmaps rt-bins \
		dv-lib dv-boot dv-help dv-link dv-pl-files dv-manual dv-man \
		dv-bins dv-online dv-classindex

manindex:	$(MANINDEX)

# ln-install installs the system by creating a link from the installed
# Prolog to the XPCE build-tree. Such installations enable development
# of xpce using the normal IDE tools.

.PHONY:		ln-install ln-install-1 link-dev-tree ln-dv-lib dv-link ln-dv-qlf
ln-install::
		$(MAKE) -j 1 ln-install-1
ln-install-1:	$(INSTALL) link-dev-tree dv-link ln-dv-lib \
		ln-dv-qlf manindex ln-classindex

link-dev-tree::
		rm -f $(DESTDIR)$(PLBASE)/xpce
		(here=`pwd` && home=`dirname $$here` && $(REL_LN) $$home $(DESTDIR)$(PLBASE)/xpce)
ln-classindex::
		./xpce.sh -t "halt(1)" \
			-g "[library(pce_class_index)],pce_make_library_index('$(DESTDIR)$(PLBASE)/xpce/prolog/lib'),halt"

ln-dv-lib::
		$(REL_LN) $(PL2XPCE) $(RTLIBDIR)


#	runtime only stuff

RTBINS=		$(XPCECLIENT) $(XPCESTUB)
RTLIBS=		$(PL2XPCE)

rt-home:
		if [ ! -d $(DESTDIR)$(RTHOME) ]; then \
			rm -f $(DESTDIR)$(RTHOME); \
			mkdir -p $(DESTDIR)$(RTHOME); \
		fi

rt-bitmaps:	rt-home
		BMFS=`find ../bitmaps/ \( -name '*.bm' -o -name '*.xpm' -o -name '*.xbm' \) -print` && \
		$(INSTALL_DATA) -p1 ../bitmaps/README $$BMFS $(DESTDIR)$(RTHOME)

rt-misc:	rt-home
		$(INSTALL_DATA) -C .. $(RTMISC) $(DESTDIR)$(RTHOME)

rt-bins:	rt-home
		$(INSTALL_DATA) -d "$(DESTDIR)$(RTBINDIR)" "$(DESTDIR)$(RTLIBDIR)"
		@for f in $(RTLIBS) $(XPCESTUB); do \
		    if [ -f $$f ]; then \
			echo "$$f --> $(DESTDIR)$(RTLIBDIR)"; \
		        $(INSTALL_PROGRAM) $$f "$(DESTDIR)$(RTLIBDIR)"; \
		    fi; \
		done

dv-home::
		if [ ! -d "$(DESTDIR)$(DVHOME)" ]; then \
			rm -f "$(DESTDIR)$(DVHOME)" \
			mkdir -p "$(DESTDIR)$(DVHOME)"; \
		fi

dv-lib:		dv-home
		@if [ ! -d $(DESTDIR)$(DVHOME)/prolog ]; then mkdir $(DESTDIR)$(DVHOME)/prolog; fi
		@for d in $(DVLIBDIRS); do \
		    if [ ! -d $(DESTDIR)$(DVHOME)/prolog/$$d ]; then \
		        mkdir $(DESTDIR)$(DVHOME)/prolog/$$d; \
		    fi; \
		    echo -n "Installing library files for prolog/$$d ..."; \
		    rm -f $(DESTDIR)$(DVHOME)/prolog/$$d/*.qlf; \
		    $(INSTALL_DATA) ../prolog/$$d/*.pl $(DESTDIR)$(DVHOME)/prolog/$$d; \
		    if [ -r ../prolog/$$d/README ]; then \
		        $(INSTALL_DATA) ../prolog/$$d/README $(DESTDIR)$(DVHOME)/prolog/$$d; \
		    fi; \
		    echo done; \
		done
		$(PL) -C "$(DESTDIR)$(DVHOME)" -f none -t 'halt(1)' \
			-g "make_library_index('prolog/lib'),halt"
		$(INSTALL_DATA) ../prolog/lib/Overview $(DESTDIR)$(DVHOME)/prolog/lib
		$(INSTALL_DATA) ../prolog/lib/trace/pltracer.hlp $(DESTDIR)$(DVHOME)/prolog/lib/trace
		@for d in $(DVIMGDIRS); do \
		    if [ ! -d $(DESTDIR)$(DVHOME)/prolog/$$d ]; then \
		        mkdir $(DESTDIR)$(DVHOME)/prolog/$$d; \
		    fi; \
		    echo -n "Installing icons in prolog/$$d ..."; \
		    $(INSTALL_DATA) \
			`find ../prolog/$$d \( -name '*.bm' -o -name '*.xpm' \)` \
				$(DESTDIR)$(DVHOME)/prolog/$$d; \
		    echo done; \
		done
		$(INSTALL_DATA) ../prolog/lib/man/classification.dat \
				$(DESTDIR)$(DVHOME)/prolog/lib/man
		$(INSTALL_DATA) ../prolog/lib/Makefile $(DESTDIR)$(DVHOME)/prolog/lib

dv-classindex:	dv-lib ln-classindex

dv-boot:	dv-lib
		@for d in $(DVBOOTDIRS); do \
		    if [ ! -d $(DESTDIR)$(DVHOME)/prolog/$$d ]; then \
		        mkdir $(DESTDIR)$(DVHOME)/prolog/$$d; \
		    fi; \
		    for f in ../prolog/$$d/*.pl; do \
			echo $$f; \
			$(INSTALL_DATA) $$f $(DESTDIR)$(DVHOME)/prolog/$$d; \
		    done; \
		done

dv-help:	dv-home
		$(INSTALL_DATA) -vp1 ../appl-help/*.hlp $(DESTDIR)$(DVHOME)

dv-manual:	dv-home
		$(INSTALL_DATA) -p1 ../man/reference/*.doc $(DESTDIR)$(DVHOME)
		$(INSTALL_DATA) -p1 ../man/reference/class/*.doc $(DESTDIR)$(DVHOME)
		$(INSTALL_DATA) -p1 ../man/faq/*.html $(DESTDIR)$(DVHOME)

dv-online:	manindex dv-manual
		if [ -r $(MANINDEX) ]; then \
		    $(INSTALL_DATA) $(MANINDEX) $(DESTDIR)$(DVHOME)/man/reference; \
		fi

dv-man:		dv-manual
		for f in xpce-client; do \
		    if test -w $(DESTDIR)/$(smandir); then \
		        $(INSTALL_DATA) ../man/$$f.1 $(DESTDIR)$(smandir)/$$f.$(mansec); \
		    fi; \
	        done

dv-link::
		$(INSTALL_DATA) ../swipl/swipl-rc $(DESTDIR)$(PLBASE)/$(PLWINNAME).rc
		$(INSTALL_DATA) ../swipl/Makefile.bin $(DESTDIR)$(PLBASE)/Makefile
ifneq ($(PLWINNAME),swipl-win)
		$(INSTALL_DATA) ../swipl/swipl-rc $(DESTDIR)$(PLBASE)/swipl-win.rc
endif

dv-pl-files:	rt-home
		if [ ! -d $(DESTDIR)$(RTHOME)/pl ]; then mkdir $(DESTDIR)$(RTHOME)/pl; fi
		$(INSTALL_DATA) ../swipl/swipl-rc $(DESTDIR)$(RTHOME)/pl/swipl.rc
		$(INSTALL_DATA) ../swipl/swipl-rc $(DESTDIR)$(RTHOME)/pl/xpce.rc
		$(INSTALL_DATA) ../swipl/Makefile.bin $(DESTDIR)$(RTHOME)/pl/Makefile

# (for now) only build the quick load files if we actually install into
# the target location.  If not, the paths will be wrong anyway.

dv-qlf:		$(DVFILES) dv-pl-files
ifeq ($(DESTDIR),)
		cd $(PLBASE); $(MAKE) xpce-qlfs
endif

ln-dv-qlf::
ifeq ($(DESTDIR),)
		-cd $(PLBASE); $(MAKE) clean
		cd $(PLBASE); $(MAKE) xpce-qlfs
endif

dv-bins:
		for f in $(XPCECLIENT); do \
		     $(INSTALL_PROGRAM) $$f $(DESTDIR)$(bindir); \
		done

pdf-install::
html-install::


################################################################
# CHECK
################################################################

check:		$(LOCALINDEX)
		./xpce.sh -q -g "['../src/test.pl'],test,halt" -t 'halt(1)'


################################################################
# CLEANUP
################################################################

clean:
		$(MAKE) -C ../swipl $@
		for m in $(MODULES) x11 msw pl; do \
		    if [ -d $$m ]; then \
		        (cd $$m; $(RM) -f *.o *~ *% core); \
		    fi; \
		done
		$(RM) -f h/names.ic h/names.ih .names-sentinel
		$(RM) -f *.o config.log

distclean:	clean
		$(MAKE) -C ../swipl $@
		if [ -h h ]; then $(RM) h; fi
		rm -rf ../lib/$(PLARCH)
		$(RM) -f version.h ../xpce.spec
		$(RM) -f xpce.sh $(FIND_NAMES)
		$(RM) -f $(LIBXPCE) $(PL2XPCE)
		$(RM) -f $(INSTALL)
		$(RM) -f $(XPCECLIENT) $(XPCESTUB)
		$(RM) -f Makefile config.h config.status config.cache
		$(RM) -f ../swipl/Makefile.bin
		$(RM) -f ../prolog/lib/Makefile
		$(RM) -f ../prolog/lib/INDEX.pl
		$(RM) -f ../prolog/pwboot/Makefile
		$(RM) -f ../sicstus/src/Makefile
		$(RM) -f ../man/reference/index.obj
