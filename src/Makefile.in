################################################################
# $Id$
#
# Makefile for XPCE version 6
#
# NOTE NOTE NOTE: This Makefile only works with GNU-Make!!
#
# Targets:
#
#	make			Builds shared object for SWI-Prolog
#	make install		Installs XPCE as SWI-Prolog library
#	make pl-static		Builds statically linked xpce holding
#				SWI-Prolog and XPCE combined
#
# The XPCE project was started by Anjo Anjewierden, who developed version
# 1 and 2.  Version 3 is result of joint effort from Anjo Anjewierden and
# Jan Wielemaker.  Versions 4 to 6 are written by Jan Wielemaker.
#
# Addresses:	Jan Wielemaker:		J.Wielemaker@uva.nl
#		Anjo Anjewierden:	A.A.Anjewierden@gw.utwente.nl
#
# 		Human-Computer Studies
#		University of Amsterdam
#		Kruislaan 419
#		1098 VA  Amsterdam
#		The Netherlands
#		FAX: (+31) 20 888 6896
#		Phone: (+31) 20 888 4671
#
# XPCE is licenced under the LGPL. See the file COPYING or
# http://www.swi-prolog.org/license.html
#
# Copyright (C) 1993-2009, University of Amsterdam
################################################################

.EXPORT_ALL_VARIABLES:
.SUFFIXES: .cxx

SHELL=@MAKESHELL@
MAKE=@MAKE@

builddir=@buildsubdir@
srcdir=@srcdir@
vpath %.c @srcdir@
vpath %.h @srcdir@
vpath %.y @srcdir@
vpath %.cxx @srcdir@
prefix=@prefix@
exec_prefix=@exec_prefix@
mansec=1
mandir=@mandir@
smandir=$(mandir)/man$(mansec)
libdir=@libdir@
bindir=@bindir@

PCEHOME=@PCEHOME@
XINCLUDES=@XINCLUDES@
XLIB=@XLIB@

# PROGRAMS

CC=@CC@
LD=@LD@
RANLIB=@RANLIB@
LDCONFIG=@LDCONFIG@
YACC=@YACC@
MKPROTO=$(srcdir)/mkproto.sh
LN=@LN_S@
AR=@AR@
ARFLAGS=ru
ETAGS=@ETAGS@
SED=sed
RM=rm
REL_LN=$(srcdir)/rel-ln
INSTALL=./xpce-install
INSTALL_PROGRAM=./xpce-install -m 755
INSTALL_DATA=./xpce-install -m 644

# LIBRARIES

NETLIBS=@NETLIBS@
XLIBS=@XLIBS@
LDFLAGS=-L$(XLIB) @LDFLAGS@
GCCLIB=@GCCLIB@
LDSOFLAGS=@LDSOFLAGS@ -L$(XLIB)
SOEXTRAOBJ=@SOEXTRAOBJ@
SO=@SO@
VWS=@VWS@

LIBS= $(XLIBS) $(NETLIBS) -lm

################################################################
# CFLAGS
#
# COFLAGS:	Optimiser flags.  Use make COFLAGS=-g for debugging
# CWFLAGS:	Warning flags
# CIFLAGS:	Include directories (for X11 for example)
# CMFLAGS:	Miscelaneous flags (all others)
# CFLAGS:	The combination.  Don't edit this.
################################################################

COFLAGS=@COFLAGS@
CWFLAGS=@CWFLAGS@
CIFLAGS=-I. -I$(srcdir) @CIFLAGS@
CMFLAGS=@CMFLAGS@ @DEFS@
CFLAGS=$(CWFLAGS) $(COFLAGS) $(CIFLAGS) $(CMFLAGS)

################################################################
# TARGET LIBRARIES
################################################################

LIB=libXPCE.a

################################################################
# PATHS FOR HOST-LANGUAGES
################################################################

# SWI-Prolog

PLBASE=@PLBASE@
PLARCH=@PLARCH@
PLINCL=@PLINCL@
PLBINDIR=$(PLBASE)/bin/$(PLARCH)
PL=@PL@
PLBUILD=@PLBUILD@
PLNAME=@PLNAME@
PLLD=@PLLD@

PLRUNTIME=$(PLBASE)/runtime/$(PLARCH)
PLOBJ=pl.o

PLTARGET=@PLTARGET@

# SICStus Prolog (not used, see README.sicstus)

SICSHOME=/usr/local/lib/sicstus
SICSTARGET=xpce-sicstus

################################################################
# Version information
################################################################

VMAJOR=@VMAJOR@
VMINOR=@VMINOR@
VPATCH=@VPATCH@
PCEVERSIONDATE=July 2009

SOMAJOR=$(VMAJOR)
SOMINOR=$(VMINOR).$(VPATCH)
PCEVERSION=$(VMAJOR).$(VMINOR).$(VPATCH)
VERSION=$(PCEVERSION), $(PCEVERSIONDATE)
ARCH=@ARCH@
OS=@OS@

################################################################
# OTHER PATHS
################################################################

MANINDEX=../man/reference/index.obj

################################################################
# IMPLICIT RULES
################################################################

.c.o:
		$(CC) -c $(CFLAGS) $< -o $@

.c.a:
		$(CC) -c $(CFLAGS) $< -o $(*F).o
		@$(AR) r $@ $(*F).o
		@$(RM) $(*F).o

################################################################
# MAIN TARGETS
################################################################

.PHONY: all banner xpce-pl
all:		banner ./xpce-install @ALLTARGET@

everything:	proto tags xpce-pl

./xpce-install:	xpce-install.c
		$(CC) $(CFLAGS) -o $@ $(srcdir)/xpce-install.c

banner:
		@echo "****************"
		@echo "Making XPCE $(VERSION) for $(ARCH)-$(OS)"
		@echo "****************"

.PHONY:		xpce prepare libXPCE
xpce:		prepare libXPCE xpce-client

xpce-pl:	xpce pl-itf

pl-itf:		pl libXPCE
		cd ../pl/src; \
		CANONICAL_PATHS=$(PCEHOME); export CANONICAL_PATHS; \
		$(MAKE) PLLD=$(PLLD) PL=$(PLBUILD) $(PLTARGET)
		rm -f ../lib/$(PLARCH)
		(cd ../lib && ln -s ../$(builddir) $(PLARCH))

pl-shared:	pl libXPCE
		cd ../pl/src; \
		CANONICAL_PATHS=$(PCEHOME); export CANONICAL_PATHS; \
		$(MAKE) soall

static:		pl-static
pl-static:	xpce pl
		cd ../pl/src; \
		CANONICAL_PATHS=$(PCEHOME); export CANONICAL_PATHS; \
		$(MAKE) nosoall

pl:
		mkdir $@

$(MANINDEX):	$(shell find ../man/reference -name '*.doc')
		-./xpce.sh \
		  -F none \
		  -f ../pl/src/swipl-rc \
		  -g "[library('man/man_index')],pce_make_manual_index('$@')" \
		  -t halt

xpce-sicstus:	xpce
		cd ../sicstus/src; \
		$(MAKE) TARGET=$(SICSTARGET)

################################################################
# Public shared library objects
################################################################

LIBXPCESO=	libXPCE.$(SO)
LIBXPCESOM=	$(LIBXPCESO).$(SOMAJOR)
LIBXPCESOMM=	$(LIBXPCESO).$(SOMAJOR).$(SOMINOR)
LIBXPCEMAIN=	libXPCEmain.a

SONAMEFLAG=	@SONAMEFLAG@
MKSOFLAGS=	$(LDSOFLAGS) @SOWHOLEARCHIVE@ -L$(XLIB)
SOLIBS=		$(SOEXTRAOBJ) libXPCE.a $(GCCLIB) $(XLIBS) $(NETLIBS) -lm

.PHONY:		so
so:		$(LIBXPCESO) $(LIBXPCEMAIN)

so-clean:
		for lib in $(SOLIBS); do $(RM) -f $$lib*; done

so-install:	so
		@echo "****************"
		@echo "* Installing XPCE shared libraries in $(libdir)"
		@echo "****************"
		$(INSTALL_PROGRAM) $(LIBXPCESOMM) $(DESTDIR)$(libdir)
		(cd $(DESTDIR)$(libdir); \
		     rm -f $(LIBXPCESOM) $(LIBXPCESO); \
		     ln -s $(LIBXPCESOMM) $(LIBXPCESOM); \
		     ln -s $(LIBXPCESOM) $(LIBXPCESO))
		$(LDCONFIG)
		$(INSTALL_DATA) $(LIBXPCEMAIN) $(DESTDIR)$(libdir)
		(cd $(DESTDIR)$(libdir) ; $(RANLIB) $(LIBXPCEMAIN))

$(LIBXPCESO):	libXPCE.a $(SOEXTRAOBJ)
		$(LD) $(MKSOFLAGS) $(SONAMEFLAG) -o $(LIBXPCESOMM) $(SOLIBS)
		rm -f $(LIBXPCESOM) $(LIBXPCESO)
		ln -s $(LIBXPCESOMM) $(LIBXPCESOM)
		ln -s $(LIBXPCESOM) $(LIBXPCESO)

# On SunOs using MIT X11R5 the symbol __XtInherit will be reported
# unititialized it this file isn't included explicitely.
# Looks like a bug to me.

Initialize.o:
		ar x $(XLIB)/libXt.a $@

################################################################
# XPCE's modules
################################################################

MODULES=	adt ari evt gnu gra itf ker men fmt msg prg rel \
		rgx txt unx win img box

################################################################
# PROTOTYPES (must be made in the source directory)
################################################################

proto:		$(foreach m, $(MODULES) $(VWS), $(srcdir)/$(m)/proto.h)

################################################################
# Building the directories
################################################################

prepare:	directories h/names.ih h/interface.h

directories:	h $(MODULES) $(VWS)

$(MODULES) bin lib $(VWS):
		mkdir $@

h:
		ln -s $(srcdir)/h .

################################################################
# Building the name tables
################################################################

find_names:	$(srcdir)/find_names.c
		$(CC) $(CFLAGS) -o find_names $(srcdir)/find_names.c

h/names.ih h/names.ic:	.names-sentinel
.names-sentinel:	find_names
		cd $(srcdir); \
		../$(builddir)/find_names h/names.ic h/names.ih -- h/*.h ???/*.c
		@touch $@

################################################################
# GNU-Emacs TAG table
################################################################

tags:
		cd $(srcdir); \
		fs="h/*.h $(VWS)/*.c"; \
		for d in $(MODULES); do fs="$$fs $$d/*.c"; done; \
		$(ETAGS) $$fs

################################################################
# ADT 		--- Abstract Data Types
################################################################

ADTOBJS=	area.o atable.o attribute.o bool.o chain.o chaintable.o \
		constant.o date.o dict.o dictitem.o hashtable.o number.o \
		point.o real.o region.o sheet.o size.o tuple.o vector.o
ADTSRC=		$(addprefix $(srcdir)/adt/, $(ADTOBJS:.o=.c))

$(srcdir)/adt/proto.h:	$(ADTSRC)
		$(MKPROTO) $(ADTSRC) > $@

################################################################
# ARI 		--- Arithmetic Operations
################################################################

ARIOBJS=	equation.o expression.o
ARISRC=		$(addprefix $(srcdir)/ari/, $(ARIOBJS:.o=.c))

$(srcdir)/ari/proto.h:	$(ARISRC)
		$(MKPROTO) $(ARISRC) > $@

################################################################
# EVT 		--- Event Handling Primitives
################################################################

EVTOBJS=	clickgesture.o conngesture.o event.o \
		eventnode.o eventtree.o gesture.o handler.o \
		handlergroup.o modifier.o movegesture.o \
		mvolgesture.o popupgesture.o recogniser.o \
		resizegesture.o rzolgesture.o edittextgest.o \
		browserselgesture.o resizetabslice.o
EVTSRC=		$(addprefix $(srcdir)/evt/, $(EVTOBJS:.o=.c))

$(srcdir)/evt/proto.h:	$(EVTSRC)
		$(MKPROTO) $(EVTSRC) > $@

################################################################
# GNU 		--- GNU-Project Libraries
################################################################

GNUOBJS=	getdate.o
GNUSRC=		$(addprefix $(srcdir)/gnu/, $(GNUOBJS:.o=.c))
CNWFLAGS=	$(CMFLAGS) $(COFLAGS) $(CIFLAGS)

gnu/gregex.o:	gnu/gregex.c gnu/gregex.h
		$(CC) -c $(CFLAGS) -Dpce_source $< -o $@
gnu/getdate.o:	$(srcdir)/gnu/getdate.c
		$(CC) -c $(CNWFLAGS) $< -o $@

# NOTE: this is not a normal dependency as include the .c file in
# the distro to reduce build dependencies (M$-Windows) and we do
# not expect gnu/getdate.y to change regularly.  If yoou change
# it, run "make getdate-src".

getdate-src::
		$(YACC) $(srcdir)/gnu/getdate.y
		mv -f y.tab.c $(srcdir)/gnu/getdate.c

$(srcdir)/gnu/proto.h:	$(GNUSRC)
		$(MKPROTO) $(GNUSRC) > $@

################################################################
# GRA 		--- Graphics Classes
################################################################

GRAOBJS=	arc.o arrow.o bitmap.o box.o circle.o colour.o \
		connection.o cursor.o device.o ellipse.o figure.o \
		font.o format.o graphical.o handle.o image.o \
		joint.o line.o link.o listbrowser.o node.o path.o \
		postscript.o scrollbar.o text.o tree.o visual.o \
		pixmap.o elevation.o pen.o draw.o colourmap.o \
		bezier.o hsv.o
GRASRC=		$(addprefix $(srcdir)/gra/, $(GRAOBJS:.o=.c))

$(srcdir)/gra/proto.h:	$(GRASRC)
		$(MKPROTO) $(GRASRC) > $@

################################################################
# ITF 		--- Host Interface Layer
################################################################

ITFOBJS=	c.o host.o interface.o cpointer.o asfile.o console.o \
		stub.o xmalloc.o iostream.o srcsink.o rc.o hostdata.o \
		public.o
ITFSRC=		$(addprefix $(srcdir)/itf/, $(ITFOBJS:.o=.c))

################################################################
# KER 		--- Kernel modules
################################################################

KER1OBJS=	alloc.o assoc.o behaviour.o class.o conversion.o \
		debug.o declarations.o error.o gc.o \
		getmethod.o glob.o global.o goodies.o passing.o \
		method.o name.o object.o programobject.o save.o \
		self.o sendmethod.o srclocation.o timer.o \
		trace.o type.o variable.o xref.o classvar.o
KER2OBJS=	inline.o
KEROBJS=	$(KER1OBJS) $(KER2OBJS)
KER1SRC=	$(addprefix $(srcdir)/ker/, $(KER1OBJS:.o=.c))

$(srcdir)/ker/proto.h:	$(KER1SRC)
		$(MKPROTO) $(KER1SRC) | grep -v PceGoal | grep -v PceType > $@

version.h:	Makefile
		@echo "#define MACHINE \"$(ARCH)\"" > $@%
		@echo "#define PCE_VERSION \"$(VERSION)\"" >> $@%
		@echo "#define OS \"$(OS)\"" >> $@%
		@mv $@% $@

h/interface.h:	Makefile
		@sed 's/^#define *PCE_VERSION *.*/#define PCE_VERSION \"$(VERSION)\"/' $@ > $@%
		@if cmp -s $@% $@; then rm $@%; else mv $@% $@; fi

h/kernel.h:	h/names.ih

ker/self.o:	version.h

ker/name.o:	h/names.ih h/names.ic

ker/glob.o:	h/kernel.h h/types.h h/graphics.h h/lang.h h/layout.h


################################################################
# MEN 		--- Menu (Dialog) items
################################################################

MENOBJS=	button.o dialogitem.o label.o menu.o menubar.o \
		menuitem.o popup.o slider.o textitem.o tab.o diagroup.o \
		tabstack.o labelbox.o intitem.o
MENSRC=		$(addprefix $(srcdir)/men/, $(MENOBJS:.o=.c))

$(srcdir)/men/proto.h:	$(MENSRC)
		$(MKPROTO) $(MENSRC) > $@


################################################################
# FMT 		--- Layout managers
################################################################

FMTOBJS=	layoutmgr.o layoutitf.o \
		table.o tabcell.o tabslice.o
FMTSRC=		$(addprefix $(srcdir)/fmt/, $(FMTOBJS:.o=.c))

$(srcdir)/fmt/proto.h:	$(FMTSRC)
		$(MKPROTO) $(FMTSRC) > $@


################################################################
# BOX 		--- Typesetting stuff
################################################################

BOXOBJS=	boxes.o hbox.o tbox.o parbox.o grbox.o rubber.o \
		lbox.o
BOXSRC=		$(addprefix $(srcdir)/box/, $(BOXOBJS:.o=.c))

$(srcdir)/box/proto.h:	$(BOXSRC)
		$(MKPROTO) $(BOXSRC) > $@


################################################################
# MSG 		--- Executable (message) Objects
################################################################

MSGOBJS=	and.o assign.o binding.o block.o code.o create.o \
		equal.o function.o if.o message.o nonequal.o \
		not.o obtain.o or.o progn.o quote.o var.o when.o while.o \
		nameref.o
MSGSRC=		$(addprefix $(srcdir)/msg/, $(MSGOBJS:.o=.c))

$(srcdir)/msg/proto.h:	$(MSGSRC)
		$(MKPROTO) $(MSGSRC) > $@

################################################################
# PRG 		--- Language Definition Classes
################################################################

PRGOBJS=	operator.o parser.o tokeniser.o
PRGSRC=		$(addprefix $(srcdir)/prg/, $(PRGOBJS:.o=.c))

$(srcdir)/prg/proto.h:	$(PRGSRC)
		$(MKPROTO) $(PRGSRC) > $@

################################################################
# REL 		--- Relation Classes
################################################################

RELOBJS=	constraint.o hyper.o identity.o relation.o \
		spatial.o
RELSRC=		$(addprefix $(srcdir)/rel/, $(RELOBJS:.o=.c))

$(srcdir)/rel/proto.h:	$(RELSRC)
		$(MKPROTO) $(RELSRC) > $@

################################################################
# RGX		--- Henry Spencer's regex library
################################################################

RGXOBJS=	regcompW.o regexecW.o \
		regfree.o regerror.o

REGCOBJS=	rgx/regcomp.c \
		rgx/regc_lex.c rgx/regc_color.c rgx/regc_nfa.c \
		rgx/regc_cvec.c rgx/regc_locale.c

rgx/regcompA.o:	$(REGCOBJS)
		$(CC) -c $(CFLAGS) $(srcdir)/rgx/regcomp.c -o $@
rgx/regcompW.o:	$(REGCOBJS)
		$(CC) -c $(CFLAGS) -DREG_WIDE $(srcdir)/rgx/regcomp.c -o $@
rgx/regexecA.o:	rgx/regexec.c
		$(CC) -c $(CFLAGS) $< -o $@
rgx/regexecW.o:	rgx/regexec.c
		$(CC) -c $(CFLAGS) -DREG_WIDE $< -o $@
rgx/regfree.o:	rgx/regfree.c
		$(CC) -c $(CFLAGS) -DREG_WIDE $< -o $@
rgx/regerror.o:	rgx/regerror.c
		$(CC) -c $(CFLAGS) -DREG_WIDE $< -o $@

$(srcdir)/rgx/proto.h::

################################################################
# TXT 		--- Text Representation and Manipulation Classes
################################################################

TXTOBJS=	chararray.o editor.o fragment.o keybinding.o \
		regex.o str.o string.o style.o syntax.o \
		textbuffer.o textcursor.o textimage.o \
		textmargin.o undo.o utf8.o i18n.o
TXTSRC=		$(addprefix $(srcdir)/txt/, $(TXTOBJS:.o=.c))

$(srcdir)/txt/proto.h:	$(TXTSRC)
		$(MKPROTO) $(TXTSRC) > $@

################################################################
# UNX 		--- Unix File, Process and Network Classes
################################################################

UNXOBJS=	directory.o file.o process.o socket.o stream.o
UNXSRC=		$(addprefix $(srcdir)/unx/, $(UNXOBJS:.o=.c))

$(srcdir)/unx/proto.h:	$(UNXSRC)
		$(MKPROTO) $(UNXSRC) > $@

xpce-client:	unx/client.c
		$(CC) -c $(CFLAGS) $< -o client.o
		$(CC) $(COFLAGS) $(CIFLAGS) $(LDFLAGS) -o $@ client.o $(NETLIBS)
		rm -f client.o


################################################################
# WIN 		--- Windows and Frames
################################################################

WINOBJS=	browser.o decorate.o dialog.o display.o \
		displaymgr.o frame.o picture.o tileadjust.o \
		setup.o tile.o view.o window.o application.o \
		monitor.o
WINSRC=		$(addprefix $(srcdir)/win/, $(WINOBJS:.o=.c))

$(srcdir)/win/proto.h:	$(WINSRC)
		$(MKPROTO) $(WINSRC) > $@


################################################################
# IMG 		--- Platform independent low-level image stuff
################################################################

IMGOBJS=	jdatasrc.o jdatadst.o jpegtoxpm.o gifread.o giftoxpm.o \
		gifwrite.o imgutil.o
IMGSRC=		$(addprefix $(srcdir)/img/, $(IMGOBJS:.o=.c))

$(srcdir)/img/proto.h:	$(IMGSRC)
		$(MKPROTO) $(IMGSRC) > $@

################################################################
# X11 		--- X11 implementation of the XPCE Virtual Window Interface
################################################################

XCOMMOBJS=	canvas.o fshell.o xcommon.o xconvert.o x11-compat.o xppm.o
WSTOBJS=	xcolour.o xcursor.o xdisplay.o xdraw.o xevent.o xfont.o \
		xframe.o ximage.o xstream.o xtimer.o xwindow.o x11.o xmenu.o \
		xdnd.o xunix.o xjpeg.o
X11OBJS=	$(XCOMMOBJS) $(WSTOBJS)

XCOMMSRC=	$(addprefix $(srcdir)/x11/, $(XCOMMOBJS:.o=.c))
WSTSRC=		$(addprefix $(srcdir)/x11/, $(WSTOBJS:.o=.c)) \
		$(srcdir)/gra/graphstate.c

$(srcdir)/x11/wstproto.h: $(WSTSRC)
		$(MKPROTO) $(WSTSRC) | grep -v '^XImage' > $@

################################################################
# MSW 		--- MS-Windows implementation of the
#		    XPCE Virtual Window Interface
################################################################

MSWOBJS=	mscolour.o mscursor.o msdisplay.o msdraw.o msevent.o \
		msfont.o msframe.o msimage.o msstream.o mstimer.o \
		mswindow.o msmenu.o mswin.o msppm.o msprinter.o \
		mscommon.o msmetafile.o msreadimage.o msjpeg.o \
		mscygwin.o

MSWSRC=		$(addprefix $(srcdir)/msw/, $(MSWOBJS:.o=.c))

################################################################$
# LIBRARY TARGET
################################################################

OBJECTS=	$(addprefix adt/, $(ADTOBJS)) \
		$(addprefix ari/, $(ARIOBJS)) \
		$(addprefix evt/, $(EVTOBJS)) \
		$(addprefix gnu/, $(GNUOBJS)) \
		$(addprefix gra/, $(GRAOBJS)) \
		$(addprefix itf/, $(ITFOBJS)) \
		$(addprefix ker/, $(KEROBJS)) \
		$(addprefix men/, $(MENOBJS)) \
		$(addprefix fmt/, $(FMTOBJS)) \
		$(addprefix box/, $(BOXOBJS)) \
		$(addprefix msg/, $(MSGOBJS)) \
		$(addprefix prg/, $(PRGOBJS)) \
		$(addprefix rel/, $(RELOBJS)) \
		$(addprefix rgx/, $(RGXOBJS)) \
		$(addprefix txt/, $(TXTOBJS)) \
		$(addprefix unx/, $(UNXOBJS)) \
		$(addprefix win/, $(WINOBJS))


ifeq ($(VWS),x11)
WSOBJECTS=	$(addprefix x11/, $(X11OBJS)) \
		$(addprefix img/, $(IMGOBJS))
else
WSOBJECTS=	$(addprefix msw/, $(MSWOBJS)) \
		$(addprefix img/, $(IMGOBJS))
endif

$(OBJECTS) $(WSOBJECTS):	h/kernel.h

libXPCE:	version.h $(OBJECTS) dowsobjs
		@echo "Running ar ru $(LIB) objects ..."
		@$(AR) ru $(LIB) $(OBJECTS) $(WSOBJECTS)
		$(RANLIB) $(LIB)

dowsobjs:	h/kernel.h
ifeq ($(VWS),x11)
		$(MAKE) CIFLAGS="$(CIFLAGS) $(XINCLUDES)" wsobjs
else
		$(MAKE) CIFLAGS="$(CIFLAGS) $(XINCLUDES) -DWIN32" wsobjs
endif

wsobjs:		$(WSOBJECTS)

################################################################
# INSTALLATION
################################################################

RTINSTALLDIRS=	postscript
RTHOME=		$(PLBASE)/xpce-$(PCEVERSION)
RTBINDIR=	$(RTHOME)/bin/$(PLARCH)
DVHOME=		$(RTHOME)
DVLIBDIRS=	lib lib/compatibility lib/dialog lib/draw lib/emacs lib/man \
		lib/xref lib/english demo contrib contrib/rubik lib/trace \
		lib/http lib/swi lib/plot lib/doc lib/math
DVIMGDIRS=	lib/dialog/bitmaps lib/trace/icons lib/trace/icons/16x16 \
		lib/doc/icons
DVBOOTDIRS=	boot
DVMISCFILES=	ChangeLog
RTMISC=		Defaults Defaults.user COPYING README
DVFILES=	rt-install dv-home dv-lib dv-boot dv-help \
	        rt-link dv-link dv-pl-files dv-manual dv-man \
		dv-misc
DVINSTALL=	$(DVFILES) dv-qlf dv-bins dv-online dv-classindex
RTINSTALL=	home rt-misc rt-bitmaps rt-bins rt-link

.PHONY:		install dv-install $(DVINSTALL) $(RTINSTALL)
install:
		$(MAKE) -j 1 dv-install

rt-install:	$(INSTALL) $(RTINSTALL)

dv-install:	$(DVINSTALL)

rpm-install:	rt-home rt-misc rt-bitmaps rt-bins rpm-link \
		dv-lib dv-boot dv-help rt-link dv-link dv-pl-files dv-manual dv-man \
		dv-misc dv-bins dv-online dv-classindex

manindex:	$(MANINDEX)

rpm-link::
		rm -f $(DESTDIR)$(PLBASE)/xpce
		(cd $(DESTDIR)$(PLBASE) && ln -s xpce-$(PCEVERSION) xpce)

# ln-install installs the system by creating a link from the installed
# Prolog to the XPCE build-tree. Such installations enable development
# of xpce using the normal IDE tools.

.PHONY:		ln-install ln-install-1 link-dev-tree dv-link ln-dv-qlf
ln-install:
		$(MAKE) -j 1 ln-install-1
ln-install-1:	$(INSTALL) link-dev-tree dv-link \
		ln-dv-qlf manindex ln-classindex

link-dev-tree::
		rm -f $(DESTDIR)$(PLBASE)/xpce
		(here=`pwd` && home=`dirname $$here` && $(REL_LN) $$home $(DESTDIR)$(PLBASE)/xpce)
ln-classindex::
		./xpce.sh -t "halt(1)" \
			-g "[library(pce_class_index)],pce_make_library_index('$(DESTDIR)$(PLBASE)/xpce/prolog/lib'),halt"

#	runtime only stuff

RTBINS=		xpce xpce-client
RTLIBS=		pl2xpce.$(SO) $(LIBXPCESOMM) $(LIBXPCEMAIN)

rt-home:
		if [ ! -d $(DESTDIR)$(RTHOME) ]; then mkdir -p $(DESTDIR)$(RTHOME); fi

rt-bitmaps:	rt-home
		BMFS=`find ../bitmaps/ \( -name '*.bm' -o -name '*.xpm' -o -name '*.xbm' \) -print` && \
		$(INSTALL_DATA) -p1 ../bitmaps/README $$BMFS $(DESTDIR)$(RTHOME)

rt-misc:	rt-home
		$(INSTALL_DATA) -C .. $(RTMISC) $(DESTDIR)$(RTHOME)

rt-bins:	rt-home
		$(INSTALL_DATA) -dC $(DESTDIR)$(RTHOME) bin/$(PLARCH) lib/$(PLARCH)
		@if [ -f xpce ]; then \
		    echo "xpce --> $(PLBINDIR)"; \
		    $(INSTALL_PROGRAM) xpce $(DESTDIR)$(PLBINDIR); \
		else \
		    echo "linking xpce to $(PLNAME) in $(DESTDIR)$(PLBINDIR)"; \
		    rm -f $(DESTDIR)$(PLBINDIR)/xpce; \
		    (cd $(DESTDIR)$(PLBINDIR); ln -s $(PLNAME) xpce) ; \
		fi
		@for f in xpce-client; do \
		    if [ -f $$f ]; then \
			echo "$$f --> $(DESTDIR)$(RTBINDIR)"; \
		        $(INSTALL_PROGRAM) $$f $(DESTDIR)$(RTBINDIR); \
		    fi; \
		done
		@for f in $(RTLIBS); do \
		    if [ -f $$f ]; then \
			echo "$$f --> $(DESTDIR)$(RTHOME)/lib/$(PLARCH)"; \
		        $(INSTALL_PROGRAM) $$f $(DESTDIR)$(RTHOME)/lib/$(PLARCH); \
		    fi; \
		done
		if [ -f $(DESTDIR)$(RTHOME)/lib/$(PLARCH)/$(LIBXPCESOMM) ]; then \
		    (cd $(DESTDIR)$(RTHOME)/lib/$(PLARCH); \
		         rm -f $(LIBXPCESOM) $(LIBXPCESO); \
		         ln -s $(LIBXPCESOMM) $(LIBXPCESOM); \
		         ln -s $(LIBXPCESOM) $(LIBXPCESO)); \
		fi

dv-home:
		if [ ! -d $(DESTDIR)$(DVHOME) ]; then mkdir -p $(DESTDIR)$(DVHOME); fi

dv-lib:		dv-home
		@if [ ! -d $(DESTDIR)$(DVHOME)/prolog ]; then mkdir $(DESTDIR)$(DVHOME)/prolog; fi
		@for d in $(DVLIBDIRS); do \
		    if [ ! -d $(DESTDIR)$(DVHOME)/prolog/$$d ]; then \
		        mkdir $(DESTDIR)$(DVHOME)/prolog/$$d; \
		    fi; \
		    echo -n "Installing library files for prolog/$$d ..."; \
		    rm -f $(DESTDIR)$(DVHOME)/prolog/$$d/*.qlf; \
		    $(INSTALL_DATA) ../prolog/$$d/*.pl $(DESTDIR)$(DVHOME)/prolog/$$d; \
		    if [ -r ../prolog/$$d/README ]; then \
		        $(INSTALL_DATA) ../prolog/$$d/README $(DESTDIR)$(DVHOME)/prolog/$$d; \
		    fi; \
		    echo done; \
		done
		$(PLBUILD) -f none -t halt \
			-g "make_library_index('$(DESTDIR)$(DVHOME)/prolog/lib')"
		$(INSTALL_DATA) ../prolog/lib/Overview $(DESTDIR)$(DVHOME)/prolog/lib
		$(INSTALL_DATA) ../prolog/lib/trace/pltracer.hlp $(DESTDIR)$(DVHOME)/prolog/lib/trace
		@for d in $(DVIMGDIRS); do \
		    if [ ! -d $(DESTDIR)$(DVHOME)/prolog/$$d ]; then \
		        mkdir $(DESTDIR)$(DVHOME)/prolog/$$d; \
		    fi; \
		    echo -n "Installing icons in prolog/$$d ..."; \
		    $(INSTALL_DATA) \
			`find ../prolog/$$d \( -name '*.bm' -o -name '*.xpm' \)` \
				$(DESTDIR)$(DVHOME)/prolog/$$d; \
		    echo done; \
		done
		$(INSTALL_DATA) ../prolog/lib/man/classification.dat \
				$(DESTDIR)$(DVHOME)/prolog/lib/man
		$(INSTALL_DATA) ../prolog/lib/Makefile $(DESTDIR)$(DVHOME)/prolog/lib

dv-classindex:	dv-lib
		./xpce.sh -t "halt(1)" \
			-g "[library(pce_class_index)],pce_make_library_index('$(DESTDIR)$(DVHOME)/prolog/lib'),halt"

dv-boot:	dv-lib
		@for d in $(DVBOOTDIRS); do \
		    if [ ! -d $(DESTDIR)$(DVHOME)/prolog/$$d ]; then \
		        mkdir $(DESTDIR)$(DVHOME)/prolog/$$d; \
		    fi; \
		    for f in ../prolog/$$d/*.pl; do \
			echo $$f; \
			$(INSTALL_DATA) $$f $(DESTDIR)$(DVHOME)/prolog/$$d; \
		    done; \
		done

dv-help:	dv-home
		$(INSTALL_DATA) -vp1 ../appl-help/*.hlp $(DESTDIR)$(DVHOME)

dv-misc:	dv-home
		$(INSTALL_DATA) -C .. $(DVMISCFILES) $(DESTDIR)$(DVHOME)

dv-manual:	dv-home
		$(INSTALL_DATA) -p1 ../man/reference/*.doc $(DESTDIR)$(DVHOME)
		$(INSTALL_DATA) -p1 ../man/reference/class/*.doc $(DESTDIR)$(DVHOME)
		$(INSTALL_DATA) -p1 ../man/faq/*.html $(DESTDIR)$(DVHOME)

dv-online:	manindex dv-manual
		if [ -r $(MANINDEX) ]; then \
		    $(INSTALL_DATA) $(MANINDEX) $(DESTDIR)$(DVHOME)/man; \
		fi

dv-man:		dv-manual
		for f in xpce-client; do \
		    $(INSTALL_DATA) ../man/$$f.1 $(DESTDIR)$(DVHOME)/man; \
		    if test -w $(smandir); then \
		        $(INSTALL_DATA) ../man/$$f.1 $(DESTDIR)$(smandir)/$$f.$(mansec); \
		    fi; \
	        done

rt-link:
		cd $(DESTDIR)$(PLBASE); rm -f xpce; ln -s xpce-$(PCEVERSION) xpce

dv-link::
		$(INSTALL_DATA) ../pl/src/swipl-rc $(DESTDIR)$(PLBASE)/$(PLNAME).rc
		$(INSTALL_DATA) ../pl/src/Makefile.bin $(DESTDIR)$(PLBASE)/Makefile

dv-pl-files:	rt-home
		if [ ! -d $(DESTDIR)$(RTHOME)/pl ]; then mkdir $(DESTDIR)$(RTHOME)/pl; fi
		$(INSTALL_DATA) ../pl/src/swipl-rc $(DESTDIR)$(RTHOME)/pl/swipl.rc
		$(INSTALL_DATA) ../pl/src/swipl-rc $(DESTDIR)$(RTHOME)/pl/xpce.rc
		$(INSTALL_DATA) ../pl/src/Makefile.bin $(DESTDIR)$(RTHOME)/pl/Makefile

# (for now) only build the quick load files if we actually install into
# the target location.  If not, the paths will be wrong anyway.

dv-qlf:		$(DVFILES) dv-pl-files
ifeq ($(DESTDIR),)
		cd $(PLBASE); $(MAKE) xpce-qlfs
endif

ln-dv-qlf::
ifeq ($(DESTDIR),)
		-cd $(PLBASE); $(MAKE) clean
		cd $(PLBASE); $(MAKE) xpce-qlfs
endif

dv-bins:
		$(INSTALL_PROGRAM) xpce-client $(DESTDIR)$(bindir)

pdf-install::
html-install::


################################################################
# CHECK
################################################################

check::
		$(PLBUILD) -q -f ../src/test.pl -g test,halt -t 'halt(1)'


################################################################
# CLEANUP
################################################################

clean:
		for d in ../pl/src; do (cd $$d; $(MAKE) clean); done
		for m in $(MODULES) x11 msw pl; do \
		    if [ -d $$m ]; then \
		        (cd $$m; $(RM) -f *.o *~ *% core); \
		    fi; \
		done
		$(RM) -f h/names.ic h/names.ih .names-sentinel
		$(RM) -f *.o config.log

distclean:	clean
		for d in ../pl/src; do (cd $$d; $(MAKE) distclean); done
		if [ -h h ]; then $(RM) h; fi
		rm -f ../lib/$(PLARCH)
		$(RM) -f version.h ../xpce.spec
		$(RM) -f xpce.sh find_names
		$(RM) -f $(LIB)
		$(RM) -f xpce-install rt-install xpce pl2xpce.so xpce-client
		$(RM) -f Makefile config.h config.status config.cache
		$(RM) -f ../pl/src/Makefile.bin
		$(RM) -f ../prolog/lib/Makefile
		$(RM) -f ../prolog/pwboot/Makefile
		$(RM) -f ../sicstus/src/Makefile
		$(RM) -f ../man/reference/index.obj
